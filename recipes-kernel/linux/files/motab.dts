/*
 * Copyright (C) 2020 Brana Electromech 
 */
/dts-v1/;

#include "am33xx.dtsi"
#include <dt-bindings/interrupt-controller/irq.h>

/ {
  model = "Brana AM335x MOTAB";
  compatible = "brana,am335x-motab", "ti,am33xx";

  cpus {
    cpu@0 {
      cpu0-supply = <&dcdc2_reg>;
    };
  };

  memory@80000000 {
    device_type = "memory";
    reg = <0x80000000 0x20000000>; /* 512 MB */
  };

//	reserved-memory {
//		#address-cells = <0x01>;
//		#size-cells = <0x01>;
//		ranges;
//
//		framebuffer_rsvmem: framebuffer@9ef00000 {
//			reg = <0x9ef00000 0x10f0000>;
//			no-map;
//		};
//	};

  chosen {
    #address-cells = <1>;
    #size-cells = <1>;
    ranges;
    stdout-path = &uart0;

//    bootargs = "console=ttyS0,115200 ubi.mtd=0 root=ubi0:rootfs rootfstype=ubifs rw rootwait drm.debug=0x1ff lpj=4980736";
//    bootargs = "console=ttyS0,115200 ubi.mtd=0 root=ubi0:rootfs rootfstype=ubifs rw rootwait lpj=4980736";
//    bootargs = "console=ttyS0,115200 ubi.mtd=0 root=ubi0:rootfs rootfstype=ubifs rw rootwait drm.debug=0x17";


//    framebuffer@9ef00020 {
//      compatible = "simple-framebuffer";
//
//      reg = <0x9ef00020 0xbb800>;
//      width = <0x320>;
//      height = <0x1e0>;
//      stride = <0x640>;
//      format = "r5g6b5";
//      status = "okay";
//
//      clocks = <&dpll_disp_m2_ck>, <&dpll_per_m2_ck>;
//      display = <&lcdc>;
//      panel = <&lcd_panel>;
//    };

  };

  vdd_3v3b: fixedregulator0 {
    compatible = "regulator-fixed";
    regulator-name = "vdd_3v3b";
    regulator-min-microvolt = <3300000>;
    regulator-max-microvolt = <3300000>;
  };

  panel_backlight: panel_backlight0 {
    compatible = "gpio-backlight";
    gpios = <&gpio1 24 GPIO_ACTIVE_HIGH>;
  };

  lcd_panel: lcd_panel0 {
//    compatible = "innolux,at070tn92";
    compatible = "ti,tilcdc,panel";
    pinctrl-names = "default";
    pinctrl-0 = <&lcdc_pins>;
    enable-gpios = <&gpio1 23 GPIO_ACTIVE_HIGH>;
    backlight = <&panel_backlight>;

//    status = "disabled";

    display-timings {
      native-mode = <&timing0>;
      timing0: 800x480 {
        hactive         = <800>;
        vactive         = <480>;
        hback-porch     = <46>;
        hfront-porch    = <210>;
        hsync-len       = <10>;
        vback-porch     = <23>;
        vfront-porch    = <22>;
        vsync-len       = <10>;
        clock-frequency = <34250000>;
        hsync-active    = <1>;
        vsync-active    = <1>;
      };
    };

    panel-info {
      ac-bias           = <255>;
      ac-bias-intrpt    = <0>;
      dma-burst-sz      = <16>;
      bpp               = <16>;
      fdd               = <0x80>;
//      tft-alt-mode      = <0>;
//      invert-pxl-clk    = <0>;
      sync-edge         = <0>;
      sync-ctrl         = <1>;
      raster-order      = <0>;
      fifo-th           = <0>;
    };

//    port {
//      panel_0: endpoint@0 {
//       remote-endpoint = <&lcdc_0>;
//      };
//    };
  };
};

//*****************************************************************************
&am33xx_pinmux {
  uart0_pins: uart0_pins_default {
    pinctrl-single,pins = <
      AM33XX_PADCONF(AM335X_PIN_UART0_RXD, PIN_INPUT_PULLUP,    MUX_MODE0) /* E15 */
      AM33XX_PADCONF(AM335X_PIN_UART0_TXD, PIN_OUTPUT_PULLDOWN, MUX_MODE0) /* E16 */
    >;
  };
};

&uart0 {
  pinctrl-names = "default";
  pinctrl-0 = <&uart0_pins>;
  status = "okay";
};

//*****************************************************************************
&am33xx_pinmux {
  i2c0_pins: i2c0_pins_default {
    pinctrl-single,pins = <
      AM33XX_PADCONF(AM335X_PIN_I2C0_SDA, PIN_INPUT, MUX_MODE0) /* C17 */
      AM33XX_PADCONF(AM335X_PIN_I2C0_SCL, PIN_INPUT, MUX_MODE0) /* C16 */
    >;
  };
};

&i2c0 {
  pinctrl-names = "default";
  pinctrl-0 = <&i2c0_pins>;
  status = "okay";
  clock-frequency = <400000>;

  tps: tps@24 {
    reg = <0x24>;
  };

  // sMCU

};

#include "tps65217.dtsi"
//#include "../../tps65217.dtsi"

&tps {
  interrupts = <7>; /* NMI */
  interrupt-parent = <&intc>;

  ti,pmic-shutdown-controller;

  regulators {
    dcdc1_reg: regulator@0 {
      regulator-name = "vdds_ddr";
      regulator-always-on;
    };

    dcdc2_reg: regulator@1 {
      /* VDD_MPU voltage limits 0.95V - 1.26V with +/-4% tolerance */
      regulator-name = "vdd_mpu";
      regulator-min-microvolt = <925000>;
      regulator-max-microvolt = <1351500>;
      regulator-boot-on;
      regulator-always-on;
    };

    dcdc3_reg: regulator@2 {
      /* VDD_CORE voltage limits 0.95V - 1.1V with +/-4% tolerance */
      regulator-name = "vdd_core";
      regulator-min-microvolt = <925000>;
      regulator-max-microvolt = <1150000>;
      regulator-boot-on;
      regulator-always-on;
    };

    ldo1_reg: regulator@3 {
      regulator-name = "vio,vrtc,vdds";
      regulator-always-on;
    };

    ldo2_reg: regulator@4 {
      regulator-name = "vdd_3v3aux";
      regulator-always-on;
    };

    ldo3_reg: regulator@5 {
      regulator-name = "vdd_1v8";
      regulator-min-microvolt = <1800000>;
      regulator-max-microvolt = <1800000>;
      regulator-always-on;
    };

    ldo4_reg: regulator@6 {
      regulator-name = "vdd_3v3a";
      regulator-always-on;
    };
  };   
};

//*****************************************************************************
&am33xx_pinmux {
  i2c1_pins: i2c1_pins_default {
    pinctrl-single,pins = <
      AM33XX_PADCONF(AM335X_PIN_UART1_RXD, PIN_INPUT, MUX_MODE3) /* (D16) uart1_rxd.I2C1_SDA */
      AM33XX_PADCONF(AM335X_PIN_UART1_TXD, PIN_INPUT, MUX_MODE3) /* (D15) uart1_txd.I2C1_SCL */
    >;
  };
};

&i2c1 {
  pinctrl-names = "default";
  pinctrl-0 = <&i2c1_pins>;

  status = "okay";
  clock-frequency = <400000>;

  // RTC
  ds3231: ds3231@68 {
    compatible = "maxim,ds3231";
    reg = <0x68>;
  };

  // captouch
	captouch: gt911@14 {
		compatible = "goodix,gt911";
		interrupt-parent = <&gpio1>;
		interrupts = <18 IRQ_TYPE_EDGE_FALLING>;
		irq-gpios = <&gpio1 18 GPIO_ACTIVE_HIGH>;
		reg = <0x14>;
		reset-gpios = <&gpio1 28 GPIO_ACTIVE_HIGH>;
		status = "okay";
//		touchscreen-inverted-y;
		touchscreen-size-x = <800>;
		touchscreen-size-y = <480>;
	};
};
//*****************************************************************************
&am33xx_pinmux {
  cpsw_default: cpsw_default {
    pinctrl-single,pins = <
      AM33XX_PADCONF(AM335X_PIN_MII1_COL,    PIN_INPUT_PULLUP,    MUX_MODE0) /* (H16) gmii1_col.gmii1_col */
      AM33XX_PADCONF(AM335X_PIN_MII1_CRS,    PIN_INPUT_PULLUP,    MUX_MODE0) /* (H17) gmii1_crs.gmii1_crs */
      AM33XX_PADCONF(AM335X_PIN_MII1_RX_ER,  PIN_INPUT_PULLUP,    MUX_MODE0) /* (J15) gmii1_rxer.gmii1_rxer */
      AM33XX_PADCONF(AM335X_PIN_MII1_TX_EN,  PIN_OUTPUT_PULLDOWN, MUX_MODE0) /* (J16) gmii1_txen.gmii1_txen */
      AM33XX_PADCONF(AM335X_PIN_MII1_RX_DV,  PIN_INPUT_PULLUP,    MUX_MODE0) /* (J17) gmii1_rxdv.gmii1_rxdv */
      AM33XX_PADCONF(AM335X_PIN_MII1_TX_CLK, PIN_INPUT_PULLUP,    MUX_MODE0) /* (K18) gmii1_txclk.gmii1_txclk */
      AM33XX_PADCONF(AM335X_PIN_MII1_RX_CLK, PIN_INPUT_PULLUP,    MUX_MODE0) /* (L18) gmii1_rxclk.gmii1_rxclk */
      AM33XX_PADCONF(AM335X_PIN_MII1_TXD0,   PIN_OUTPUT_PULLDOWN, MUX_MODE0) /* (K17) gmii1_txd0.gmii1_txd0 */
      AM33XX_PADCONF(AM335X_PIN_MII1_TXD1,   PIN_OUTPUT_PULLDOWN, MUX_MODE0) /* (K16) gmii1_txd1.gmii1_txd1 */
      AM33XX_PADCONF(AM335X_PIN_MII1_TXD2,   PIN_OUTPUT_PULLDOWN, MUX_MODE0) /* (K15) gmii1_txd2.gmii1_txd2 */
      AM33XX_PADCONF(AM335X_PIN_MII1_TXD3,   PIN_OUTPUT_PULLDOWN, MUX_MODE0) /* (J18) gmii1_txd3.gmii1_txd3 */
      AM33XX_PADCONF(AM335X_PIN_MII1_RXD0,   PIN_INPUT_PULLUP,    MUX_MODE0) /* (M16) gmii1_rxd0.gmii1_rxd0 */
      AM33XX_PADCONF(AM335X_PIN_MII1_RXD1,   PIN_INPUT_PULLUP,    MUX_MODE0) /* (L15) gmii1_rxd1.gmii1_rxd1 */
      AM33XX_PADCONF(AM335X_PIN_MII1_RXD2,   PIN_INPUT_PULLUP,    MUX_MODE0) /* (L16) gmii1_rxd2.gmii1_rxd2 */
      AM33XX_PADCONF(AM335X_PIN_MII1_RXD3,   PIN_INPUT_PULLUP,    MUX_MODE0) /* (L17) gmii1_rxd3.gmii1_rxd3 */
    >;
  };
};

&mac {
  pinctrl-names = "default";
  pinctrl-0 = <&cpsw_default>;
  status = "okay";
  slaves = <1>;
};

&am33xx_pinmux {
  davinci_mdio_default: davinci_mdio_default {
    pinctrl-single,pins = <
      AM33XX_PADCONF(AM335X_PIN_MDC,  PIN_OUTPUT_PULLUP, MUX_MODE0) /* (M18) mdio_clk.mdio_clk */
      AM33XX_PADCONF(AM335X_PIN_MDIO, PIN_INPUT_PULLUP,  MUX_MODE0) /* (M17) mdio_data.mdio_data */
    >;
  };
};

&davinci_mdio {
  pinctrl-names = "default";
  pinctrl-0 = <&davinci_mdio_default>;
  status = "okay";

  ethphy0: ethernet-phy@0 {
    reg = <0>;
  };
};

&cpsw_emac0 {
  phy-handle = <&ethphy0>;
  phy-mode = "mii";
};

//*****************************************************************************
&am33xx_pinmux {
  nandflash_pins: nandflash_pins {
    pinctrl-single,pins = <
      AM33XX_PADCONF(AM335X_PIN_GPMC_AD0,      PIN_INPUT_PULLDOWN,  MUX_MODE0)
      AM33XX_PADCONF(AM335X_PIN_GPMC_AD1,      PIN_INPUT_PULLDOWN,  MUX_MODE0)
      AM33XX_PADCONF(AM335X_PIN_GPMC_AD2,      PIN_INPUT_PULLDOWN,  MUX_MODE0)
      AM33XX_PADCONF(AM335X_PIN_GPMC_AD3,      PIN_INPUT_PULLDOWN,  MUX_MODE0)
      AM33XX_PADCONF(AM335X_PIN_GPMC_AD4,      PIN_INPUT_PULLDOWN,  MUX_MODE0)
      AM33XX_PADCONF(AM335X_PIN_GPMC_AD5,      PIN_INPUT_PULLDOWN,  MUX_MODE0)
      AM33XX_PADCONF(AM335X_PIN_GPMC_AD6,      PIN_INPUT_PULLDOWN,  MUX_MODE0)
      AM33XX_PADCONF(AM335X_PIN_GPMC_AD7,      PIN_INPUT_PULLDOWN,  MUX_MODE0)
      AM33XX_PADCONF(AM335X_PIN_GPMC_CSN0,     PIN_OUTPUT,          MUX_MODE0)
      AM33XX_PADCONF(AM335X_PIN_GPMC_WAIT0,    PIN_INPUT,           MUX_MODE0)
      AM33XX_PADCONF(AM335X_PIN_GPMC_OEN_REN,  PIN_OUTPUT_PULLUP,   MUX_MODE0)
      AM33XX_PADCONF(AM335X_PIN_GPMC_WEN,      PIN_OUTPUT_PULLUP,   MUX_MODE0)
      AM33XX_PADCONF(AM335X_PIN_GPMC_ADVN_ALE, PIN_OUTPUT_PULLDOWN, MUX_MODE0)
      AM33XX_PADCONF(AM335X_PIN_GPMC_BEN0_CLE, PIN_OUTPUT_PULLDOWN, MUX_MODE0)
      AM33XX_PADCONF(AM335X_PIN_GPMC_WPN,      PIN_OUTPUT,          MUX_MODE0)
    >;
  };
};

&gpmc {
  pinctrl-names = "default";
  pinctrl-0 = <&nandflash_pins>;
  ranges = <0 0 0x08000000 0x8000000>; /* CS0 for 128 MiB chip */
  status = "okay";

  nandflash: nand@0,0 {
    compatible = "ti,omap2-nand";
    reg = <0 0 4>; /* CS0, offset 0, IO size 4 */
    interrupt-parent = <&gpmc>;
    interrupts = <0 IRQ_TYPE_NONE>, /* fifoevent */
                 <1 IRQ_TYPE_NONE>; /* termcount */
    rb-gpios = <&gpmc 0 GPIO_ACTIVE_HIGH>; /* gpmc_wait0 */
    ti,nand-ecc-opt = "bch8";
    ti,elm-id = <&elm>;
    nand-bus-width = <8>;
    gpmc,device-nand = "true";
    gpmc,device-width = <1>;
    gpmc,sync-clk-ps = <0>;
    gpmc,cs-on-ns = <0>;
    gpmc,cs-rd-off-ns = <30>;
    gpmc,cs-wr-off-ns = <30>;
    gpmc,adv-on-ns = <0>;
    gpmc,adv-rd-off-ns = <30>;
    gpmc,adv-wr-off-ns = <30>;
    gpmc,we-on-ns = <0>;
    gpmc,we-off-ns = <20>;
    gpmc,oe-on-ns = <10>;
    gpmc,oe-off-ns = <30>;
    gpmc,access-ns = <30>;
    gpmc,rd-cycle-ns = <30>;
    gpmc,wr-cycle-ns = <30>;
    gpmc,bus-turnaround-ns = <0>;
    gpmc,cycle2cycle-delay-ns = <50>;
    gpmc,clk-activation-ns = <0>;
    gpmc,wait-monitoring-ns = <0>;
    gpmc,wr-access-ns = <30>;
    gpmc,wr-data-mux-bus-ns = <0>;

    #address-cells = <1>;
    #size-cells = <1>;

    /* MTD partition table */
    partition@0 {
      label = "rootpart";
      reg = <0x00000000 0x8000000>;
    };
  };
};

&elm {
	status = "okay";
};

//*****************************************************************************
&am33xx_pinmux {
  lcdc_pins: lcdc_pins_default {
    pinctrl-single,pins = <
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA0,      PIN_OUTPUT, MUX_MODE0) /* (R1) lcd_data0.lcd_data0 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA1,      PIN_OUTPUT, MUX_MODE0) /* (R2) lcd_data1.lcd_data1 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA2,      PIN_OUTPUT, MUX_MODE0) /* (R3) lcd_data2.lcd_data2 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA3,      PIN_OUTPUT, MUX_MODE0) /* (R4) lcd_data3.lcd_data3 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA4,      PIN_OUTPUT, MUX_MODE0) /* (T1) lcd_data4.lcd_data4 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA5,      PIN_OUTPUT, MUX_MODE0) /* (T2) lcd_data5.lcd_data5 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA6,      PIN_OUTPUT, MUX_MODE0) /* (T3) lcd_data6.lcd_data6 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA7,      PIN_OUTPUT, MUX_MODE0) /* (T4) lcd_data7.lcd_data7 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA8,      PIN_OUTPUT, MUX_MODE0) /* (U1) lcd_data8.lcd_data8 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA9,      PIN_OUTPUT, MUX_MODE0) /* (U2) lcd_data9.lcd_data9 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA10,     PIN_OUTPUT, MUX_MODE0) /* (U3) lcd_data10.lcd_data10 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA11,     PIN_OUTPUT, MUX_MODE0) /* (U4) lcd_data11.lcd_data11 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA12,     PIN_OUTPUT, MUX_MODE0) /* (V2) lcd_data12.lcd_data12 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA13,     PIN_OUTPUT, MUX_MODE0) /* (V3) lcd_data13.lcd_data13 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA14,     PIN_OUTPUT, MUX_MODE0) /* (V4) lcd_data14.lcd_data14 */
      AM33XX_PADCONF(AM335X_PIN_LCD_DATA15,     PIN_OUTPUT, MUX_MODE0) /* (T5) lcd_data15.lcd_data15 */
      AM33XX_PADCONF(AM335X_PIN_LCD_VSYNC,      PIN_OUTPUT, MUX_MODE0) /* (U5) lcd_vsync.lcd_vsync */
      AM33XX_PADCONF(AM335X_PIN_LCD_HSYNC,      PIN_OUTPUT, MUX_MODE0) /* (R5) lcd_hsync.lcd_hsync */
      AM33XX_PADCONF(AM335X_PIN_LCD_PCLK,       PIN_OUTPUT, MUX_MODE0) /* (V5) lcd_pclk.lcd_pclk */
      AM33XX_PADCONF(AM335X_PIN_LCD_AC_BIAS_EN, PIN_OUTPUT, MUX_MODE0) /* (R6) lcd_ac_bias_en.lcd_ac_bias_en */
    >;
  };
};

&lcdc {
//  blue-and-red-wiring = "crossed";
  status = "okay";

//  port {
//    lcdc_0: endpoint@0 {
//      remote-endpoint = <&panel_0>;
//    };
//  };
};


